<?xml version="1.0" encoding="utf-8" ?>
<component name="TheClassicalStation" extends="Scene">
    <children>
        <!-- Put the station banner image in the top right -->
        <Poster id="wcpePoster" loadDisplayMode="scaleToFit" width="500" height="380"
                translation="[1350,50]" uri="pkg:/images/theclassicalstation_svg_540x405.png"/>

        <SimpleLabel id="programLabel" text=""/>

        <SimpleLabel id="justPlayedHeading" text=""  />
        <SimpleLabel id="justPlayedTitle" text=""  />
        <SimpleLabel id="justPlayedPerformers" text=""  />
        <SimpleLabel id="justPlayedComposer" text=""  />

        <SimpleLabel id="nowPlayingHeading" text=""  />
        <SimpleLabel id="nowPlayingTitle" text=""  />
        <SimpleLabel id="nowPlayingPerformers" text=""  />
        <SimpleLabel id="nowPlayingComposer" text=""  />

        <SimpleLabel id="comingUpHeading" text=""  />
        <SimpleLabel id="comingUpTitle" text=""  />
        <SimpleLabel id="comingUpPerformers" text=""  />
        <SimpleLabel id="comingUpComposer" text=""  />

        <SimpleLabel
                id="timeLabel"
                text = ""
                horizOrigin = "left"
                vertOrigin = "top"
                translation="[1350,400]"
                fontUri="pkg:/font-subsets/RobotoMono-Regular-subset.ttf"
                fontSize="30"
                color="0xffffffcf"
        />
        <!-- This is the nicely formatted display of what's played, playing, and to play next. -->
   <!--     <MultiStyleLabel
                id="whatsPlayingLabel"
                text=""
                width="1300"
                wrap="true"
                translation="[100, 50]"/> -->

        <Timer
            id="bufferingTimer"
            repeat="false"
            duration="3"/>
    </children>


    <interface>
        <field id="portarray" type="array" alwaysNotify="true"/>
    </interface>
    <script type="text/brightscript" uri="pkg:/components/theclassicalstation/audio.brs" />
    <script type="text/brightscript" uri="pkg:/components/theclassicalstation/screen.brs" />

    <script type="text/brightscript" >
<![CDATA[
function init() as Void
    self = m.top  ' <Component: roSGNode:TheClassicalStation>
    ' https://developer.roku.com/docs/references/brightscript/components/rosgnode.md

    ' m: <Component: roAssociativeArray>
    ' m.global: <Component: roSGNode:Node>

    scaleAndPositionPoster(self.findNode("wcpePoster"))

    self.SetFields({
        backgroundUri: ""  ' MUST set backgroundUri to "" explicitly, or background color does not take effect. !#@!$@#!$@
        backgroundColor: "0x063350ff"
    })

    self.setFocus(true)

    m.audio = setupAudioNode(self)
    m.backgroundTask = setupBackgroundTask(self)
    m.stopped_manually = false
    self.ObserveField("portarray", "onPortArrayChange")

    m.is_dev = CreateObject("roAppInfo").IsDev()

    resolution = CreateObject("roDeviceInfo").GetUIResolution()["name"]  ' "SD", "HD", "FHD"
    self.FindNode("timeLabel").fontSize = {"SD": "15", "HD": "20", "FHD": "30"}[resolution]
    'self.FindNode("whatsPlayingLabel").width = {"SD": "500", "HD": "800", "FHD": "1300"}[resolution]

    setDrawingStyles(self.FindNode("whatsPlayingLabel"))

    m.bufferingTimer = self.FindNode("bufferingTimer")
    m.bufferingTimer.ObserveField("fire", "bufferingTimerExpired")
end function

sub onPortArrayChange()
    print "port array change"
    m.audio.observeField("state", m.top.portarray[0])
end sub

sub onLabelsChanged()
    ' Get the labels field from the background task. The value
    ' is an associative array, where each key is the name of a label
    ' and its value is the text to set that label to.
    labels = m.backgroundTask.labels
    labels.Reset()
    name = labels.Next()
    while name <> invalid
        node = m.top.findNode(name)
        if node <> invalid then
            node.text = labels[name]
        end if
        name = labels.Next()
    end while
    if m.is_dev then
        timeLabel = m.top.findNode("timeLabel")
        timeLabel.text = timeLabel.text + " " + m.audio.state
    end if
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    handled = false
    if press then
        if (key = "play") then
            if (m.audio.state = "playing") then
                m.stopped_manually = true
                m.audio.control = "stop"
            else
                m.stopped_manually = false
                m.audio.control = "play"
            end if
            handled = true
        end if
    end if
    return handled
end function

function setupBackgroundTask(self)
    backgroundTask = CreateObject("roSGNode", "BackgroundTask")
    ' <Component: roSGNode:BackgroundTask>

    ' when the background tasks's "labels" field changes,
    ' call onLabelsChanged() in this component.
    backgroundTask.ObserveField("labels", "onLabelsChanged")

    self.appendChild(backgroundTask)
    return backgroundTask
end function
]]>
</script>
<!-- End of BrightScript Portion -->
</component>
