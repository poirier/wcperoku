<?xml version="1.0" encoding="utf-8" ?>
<component name="TheClassicalStation" extends="Scene">
    <children>
        <!-- Put the station banner image in the top right -->
        <Poster id="wcpePoster" loadDisplayMode="scaleToFit"
                uri="pkg:/images/theclassicalstation_svg_540x405.png"/>

        <LayoutGroup itemspacings="[10,20,10,10,20,20,10,10,20,20, 10]" inheritParentOpacity="false" translation="[50,40]">
            <Label id="programLabel"/>

            <Label id="justPlayedHeading"/>
            <Label id="justPlayedTitle"/>
            <Label id="justPlayedPerformers"/>
            <Label id="justPlayedComposer"/>

            <Label id="nowPlayingHeading"/>
            <Label id="nowPlayingTitle"/>
            <Label id="nowPlayingPerformers"/>
            <Label id="nowPlayingComposer"/>

            <Label id="comingUpHeading"/>
            <Label id="comingUpTitle"/>
            <Label id="comingUpPerformers"/>
            <Label id="comingUpComposer"/>
        </LayoutGroup>

        <label id="website"/>

        <Timer id="bufferingTimer" repeat="false" duration="3"/>
    </children>
    <interface>
        <!-- Main.brs will tell us which message port it is using by assigning to this field -->
        <field id="portarray" type="array" alwaysNotify="true"/>
    </interface>
    <script type="text/brightscript" uri="pkg:/components/theclassicalstation/audio.brs" />
    <script type="text/brightscript" uri="pkg:/components/theclassicalstation/screen.brs" />
    <script type="text/brightscript" >
<![CDATA[
function init() as Void
    self = m.top  ' <Component: roSGNode:TheClassicalStation>
    ' https://developer.roku.com/docs/references/brightscript/components/rosgnode.md

    ' m: <Component: roAssociativeArray>
    ' m.global: <Component: roSGNode:Node>

    uires = CreateObject("roDeviceInfo").GetUIResolution()
    self.findNode("wcpePoster").SetFields({
        width: uires["width"]
        height: uires["height"]
        opacity: "0.05"
    })

    print("SCREEN: width=" + uires["width"].toStr() + ", height=" + uires["height"].toStr())

    self.SetFields({
        backgroundUri: ""  ' MUST set backgroundUri to "" explicitly, or background color does not take effect. !#@!$@#!$@
        backgroundColor: "0x063350ff"
    })

    self.setFocus(true)

    m.audio = setupAudioNode(self)

    m.backgroundTask = CreateObject("roSGNode", "BackgroundTask") ' <Component: roSGNode:BackgroundTask>
    ' when the background tasks's "labels" field changes, call onLabelsChanged() in this component.
    m.backgroundTask.ObserveField("labels", "onLabelsChanged")
    self.appendChild(m.backgroundTask)

    m.stopped_manually = false

    ' Main.brs will tell us which message port it is using by assigning to this field
    ' ' ' ' ' ' ' self.ObserveField("portarray", "onPortArrayChange")

    configureLabelFields()

    m.bufferingTimer = self.FindNode("bufferingTimer")
    m.bufferingTimer.ObserveField("fire", "bufferingTimerExpired")
end function

sub XXXonPortArrayChange()
    ' Now we know which port Main is using, observe the audio state
    ' and send a message to that port when the audio state changes.
    m.audio.observeField("state", m.top.portarray[0])
end sub

sub onLabelsChanged()
    ' Get the labels field from the background task. The value
    ' is an associative array, where each key is the name of a label
    ' and its value is the text to set that label to.
    labels = m.backgroundTask.labels
    ' Reset, Next is a way to iterate over an AssociativeArray
    labels.Reset()
    name = labels.Next()
    while name <> invalid
        node = m.top.findNode(name)
        if node <> invalid then
            node.text = labels[name]
        end if
        name = labels.Next()
    end while
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    handled = false
    if press then
        if (key = "play") then
            if (m.audio.state = "playing") then
                m.stopped_manually = true
                m.audio.control = "stop"
            else
                m.stopped_manually = false
                m.audio.control = "play"
            end if
            handled = true
        end if
    end if
    return handled
end function
]]>
</script>
<!-- End of BrightScript Portion -->
</component>
