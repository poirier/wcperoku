<?xml version="1.0" encoding="utf-8" ?>
<component name="TheClassicalStation" extends="Scene">
    <children>
        <!-- Put the station banner image in the top right -->
        <Poster id="wcpePoster" loadDisplayMode="scaleToFit" width="500" height="380"
                translation="[1350,50]" uri="pkg:/images/theclassicalstation_svg_540x405.png"/>

        <!-- By default, the time display is the same color as the background, so it's not visible. -->
        <!-- We'll change the color during initialization if the app was sideloaded, for debugging. -->
        <SimpleLabel id="timeLabel" text = "" horizOrigin = "left" vertOrigin = "top" translation="[100,50]" color="0x063350ff"/>

        <!-- This is the nicely formatted display of what's played, playing, and to play next. -->
        <MultiStyleLabel
                id="whatsPlayingLabel"
                text="default text"
                width="2160"
                wrap="true"
                translation="[100, 100]"
        />
    </children>
    <interface>
        <field id="portarray" type="array" alwaysNotify="true"/>
    </interface>
<script type="text/brightscript" >
<![CDATA[
function init() as Void
    self = m.top  ' <Component: roSGNode:TheClassicalStation>
    ' https://developer.roku.com/docs/references/brightscript/components/rosgnode.md

    ' m: <Component: roAssociativeArray>
    ' m.global: <Component: roSGNode:Node>

    scaleAndPositionPoster(self.findNode("wcpePoster"))

    self.SetFields({
        backgroundUri: ""  ' MUST set backgroundUri to "" explicitly, or background color does not take effect. !#@!$@#!$@
        backgroundColor: "0x063350ff"
    })

    self.setFocus(true)

    m.audio = setupAudioNode(self)
    m.backgroundTask = setupBackgroundTask(self)

    m.stopped_manually = false
    self.ObserveField("portarray", "onPortArrayChange")

    if CreateObject("roAppInfo").IsDev() then
        ' We've been sideloaded, so this is a developer testing this.
        ' Change the color of the time display to make it visible, so we
        ' can easily see what time it is and tell if the background task
        ' is updating things.
        self.FindNode("timeLabel").color = "0xffffffcf"
    end if

    setDrawingStyles(self.FindNode("whatsPlayingLabel"))
end function

sub onPortArrayChange()
    print "port array change"
    m.audio.observeField("state", m.top.portarray[0])
end sub

sub onLabelsChanged()
    ' Get the labels field from the background task. The value
    ' is an associative array, where each key is the name of a label
    ' and its value is the text to set that label to.
    labels = m.backgroundTask.labels
    labels.Reset()
    name = labels.Next()
    while name <> invalid
        m.top.findNode(name).text = labels[name]
        name = labels.Next()
    end while
end sub

sub onAudioStateChange()
    print "audio state change to ";m.audio.state
    if (m.audio.state = "error") then
        print "Audio error: ";m.audio.errorMsg
    end if
    if (m.audio.state <> "buffering" and m.audio.state <> "playing" and m.stopped_manually <> true) then
        ' It stopped for some reason other than the user hitting "PLAY".
        ' Try to start it again.
        m.audio.control = "play"
    end if
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    handled = false
    if press then
        if (key = "play") then
            if (m.audio.state = "playing") then
                m.stopped_manually = true
                m.audio.control = "stop"
            else
                m.stopped_manually = false
                m.audio.control = "play"
            end if
            handled = true
        end if
    end if
    return handled
end function

function setupAudioNode(self) as Dynamic

    audio = createObject("roSGNode", "Audio")
    audiocontent = createObject("RoSGNode", "ContentNode")
    audiocontent.Url = "http://playerservices.streamtheworld.com/api/livestream-redirect/WCPE_FM_ADP.aac"
    audiocontent.Title = "The Classical Station"
    audiocontent.TextOverlayUL = "Upper left"
    audiocontent.IgnoreStreamErrors = true

    audio.content = audiocontent
    audio.loop = true

    audio.observeField("state", "onAudioStateChange")
    self.appendChild(audio)
    audio.control = "play"
    return audio
end function

sub setDrawingStyles(node)
    devInfo = CreateObject("roDeviceInfo")
    resolution = devInfo.GetUIResolution()["name"]  ' "SD", "HD", "FHD"

    bigfontsize = {"SD": "20", "HD": 30, "FHD": 48}[resolution]
    medfontsize = {"SD": "16", "HD": 20, "FHD": 36}[resolution]

    node.drawingStyles = {
        "heading": {
            "color": "#76A2B7FF"
            "fontSize": bigfontsize
            "fontUri": "font:LargeSystemFont"
        }
        "title": {
            "fontUri": "pkg:/fonts/SourceSerifPro-Regular.ttf"
            "fontSize": bigfontsize
            "color": "#FFFFFFFF"
        }
        "performers":{
            "fontUri": "pkg:/fonts/SourceSerifPro-Italic.ttf"
            "fontSize": medfontsize
            "color": "#FFFFFFFF"
        }
        "composer": {
            "fontUri": "pkg:/fonts/SourceSerifPro-Regular.ttf"
            "fontSize": bigfontsize
            "color": "#FFFFFFFF"
        }
        "message": {
            "fontSize": medfontsize
            "fontUri": "font:LargeSystemFont"
            "color":  "#FFFFFFFF"
        }
        "default": {
            "fontSize": medfontsize
            "fontUri": "font:LargeSystemFont"
            "color": "#000000FF"
        }
    }
end sub

sub scaleAndPositionPoster(poster)
    devInfo = CreateObject("roDeviceInfo")
    uires = devInfo.GetUIResolution()
    resolution = uires["name"]  ' "SD", "HD", "FHD"
    screen_width = uires["width"]
    screen_height = uires["height"]

    margin_w = screen_width / 32
    margin_h = screen_height / 16

    poster_w = screen_width / 4 ' e.g. 320
    poster_x = screen_width - poster_w - margin_w
    poster_y = margin_h
    poster_fields = {
        translation: "[" + poster_x.ToStr() + "," + poster_y.ToStr() + "]"
        width: poster_w
        height: screen_height / 4 ' e.g. 270
    }
    poster.SetFields(poster_fields)
end sub

function setupBackgroundTask(self) as dynamic
    backgroundTask = CreateObject("roSGNode", "BackgroundTask")
    ' <Component: roSGNode:BackgroundTask>
    backgroundTask.ObserveField("labels", "onLabelsChanged")
    self.appendChild(backgroundTask)
    backgroundtask.control = "RUN"
    return backgroundTask
end function
]]>
</script>
<!-- End of BrightScript Portion -->
</component>
